[react_prac3]
React Styling
    => 스타일 적용

1. Styling 방식
    => 일반 CSS 사용
    
    => Sass
        Css 전처리기(pre-process)를 이용하는 방식으로 확장된 CSS 문법을 사용한다.
        
    => CSS Module
        스타일을 작성할 때 CSS 클래스 이름이 다른 CSS클래스 이름과 충돌하지 않도록 파일마다 고유한 이름을 자동으로 생성해주는 옵션
    
    => styled-components
        컴포넌트 안에 스타일을 내장 시키는 방식으로 동일한 스타일이 적용된 컴포넌트를 사용하는 방식이다.
        실제 애플리케이션 제작 작업을 할 때 이런 방식으로 만들어진 컴포넌트들을 많이 사용한다.

2. 일반 CSS 적용
    1) 개요
        => webpack의 css-loader를 이용해서 일반 CSS를 불러오는 방식
        => react 프로젝트를 생성하면 App.js가 App.css를 불러오는 방식

    2) Naming
        => react 프로젝트에서는 컴포넌트-클래스이름 의 형태로 Naming한다.
        => Ex> App-header는 App 컴포넌트 안에 header라는 클래스를 의미하는 것이다.
        
        => BEM(Block Element Modifier) 방법으로 CSS에서는 가장 많이 사용된다.
            -> 각각의 요소는 -나 _로 구분한다.
            -> 블럭이름__요소이름__수정자이름 형태로 Naming한다.

        => SMACSS(Scalable and Modular Architecture for CSS) - 확장형 모듈식 구조
            -> Base에는 아무런 접두어도 붙이지 않고 Layout과 관련된 경우는  I- 이름을 정하는 방식이다.
            -> state의 경우는 is- 또는 s- 등을 추가 하는 것으로 용도를 파악하는 것이 편리하다.

        => 이 외에 OOCSS도 있다.

    3) App.css 수정으로 예시 보기
        
        => .App a {
            color: #61dafb;
            }
            -> App 컴포넌트 내의 a태그의 색상을 변경한다는 의미.

        
3. CSS Module
    1) 개요
        => Css를 불러와서 사용할 때, 클래스 이름을 고유한 값으로 만들어서 적용한다.
        => [파일이름]_[클래스이름]_[해시값] 을 추가해서 클래스 이름을 부여한다.
        => 사용하는 방법은 css파일의 확장자를 이름.module.css 로 만들면 된다.
        => 이 기능을 사용할 때는 css 파일의 클래스 이름을 일반적인 이름으로 사용하면 된다.
        => 별도의 클래스 이름을 부여하지 못하도록 하고자 하는 경우에는 클래스 이름 앞에 :global을 추가하면 된다.

    2) 적용
        => CSSModuel.module.css 파일을 생성
        [CSSModuel.module.css]
            /* 파일 안에서만 사용하는 클래스 */
            .wrapper{
                background: black;
                padding: 1em;
                color: white;
                font-size: 2rem;
            }

            /* 모든 곳에서 사용할 수 있는 클래스 - 이름을 수정하지 않는다. */
            :global .somthing{
                font-weight: 800;
                color: aqua;
            }

        => CSSModuel.module.css 를 적용할 컴포넌트 CSSModuel.jsx 생성하고 App.js에 적용
        [src/component/CSSModuel.jsx]
            import React from 'react'
            import styles from'../css/CSSModule.module.css'

            export const CSSModule = () => {
            return (
                <div className={styles.wrapper}>
                    처음 사용해보는 
                    {/* :global이 적용된 css요소는 클래스네임.적용할 css 형태가 아니라 바로 css요소 이름으로 작성 */}
                    <span className='somthing'>CSS Modeule</span> 
                </div>
            )
            }

            export default CSSModule
        
        => 브라우저의 요소를 확인해보면 태그의 클래스네임이 고유한 이름으로 자동으로 바뀐 것을 확인할 수 있다.

    3) 여러 개의 클래스 동시적용
        => CSSModuel.module.css에 클래스를 추가하고 CSSModuel.jsx에 하나의 태그에 여러개의 Css클래스를 적용한다.
        => 이 때 태그의 className = {`${클래스.속성} ${클래스.속성}` 과 같이 적용한다.}

        [/css/CSSModuel.module.css]
            /* 파일 안에서만 사용하는 클래스 */
            .wrapper{
                background: black;
                padding: 1em;
                color: white;
                font-size: 2rem;
            }

            /* 모든 곳에서 사용할 수 있는 클래스 - 이름을 수정하지 않는다. */
            :global .somthing{
                font-weight: 800;
                color: aqua;
            }

            .inverted{
                color: black;
                background: white;
                border: 1px solid black;
            }

        [/src/component/CSSModuel.jsx]
            import React from 'react'
            import styles from'../css/CSSModule.module.css'

            export const CSSModule = () => {
            return (
                <div className={`${styles.wrapper} ${styles.inverted}`}>
                    처음 사용해보는 
                    {/* :global이 적용된 css요소는 클래스네임.적용할 css 형태가 아니라 바로 css요소 이름으로 작성 */}
                    <span className='somthing'>CSS Modeule</span> 
                </div>
            )
            }

            export default CSSModule
            

4. classnames 라이브러리
    1) 개요
        => CSS 클래스를 조건부로 설정할 때 유용하고 여러 클래스를 설정할 때 도 편리한 라이브러리 이다.

        => yarn add classnames 나 npm install classnames 로 설치

        => classNames('one', 'two')와 같이 두개 설정이나 classNames('one', ['two', 'three'])로 세개 설정이 가능하다.
        
        => classNames('one', {'two':true}) 로 two를 적용할 수 있고 classNames('one', {'two':false})로 하면 two 는 적용되지 않는다.
            -> true나 false 위치를 변수로 설정하면 조건부 설정을 쉽게 구현하는 것이 가능하다.

        [/src/component/CSSModule.jsx]
            import React from 'react'
            import styles from'../css/CSSModule.module.css'
            import classNames from 'classnames/bind'

            // cx 안에서는 styles 생략하는 것이 가능.
            const cx = classNames.bind(styles)

            export const CSSModule = () => {
            return (
                <div className={`${styles.wrapper} ${styles.inverted}`}>
                    처음 사용해보는 
                    {/* :global이 적용된 css요소는 클래스네임.적용할 css 형태가 아니라 바로 css요소 이름으로 작성 */}
                    <span className='somthing'>CSS Modeule</span>

                    <div className={cx('wrapper', 'inverte')}>
                        classnames 라이브러리 사용하기
                    </div>
                </div>
            )
            }

            export default CSSModule

5. SASS
    1) CSS Pre-Process(전처리기)
        => css가 동작하기 전에 사용하는 기능으로 css의 불편함을 해결하기 위한 확장 기능이다.
        => 문법 자체는 css와 유사하지만 선택자의 중첩이나 조건문, 반복문, 다양한 단위의 연산등이 가능하다.
        => 전처리기 종류로는 Sass 외에 Lessm Stylus 등이 있다.

    2) Sass(Syntacically Awesome Style Sheets)
        => 중복되는 코드를 줄요서 가독성 좋게 작성이 가능하다.
        => https://sass-guidelin.es/ko 에서 가이드 라인(조건문, 반복문 등의)을 확인할 수 있다.

        => SCSS
            CSS 구문과 호환 되도록 새로운 구문을 도입해 만든 SASS의 기능을 지원하는 CSS의 super set
            node-scss scss-loader sass 3개 라이브러리를 설치해야 한다.(yarn node-scss scss-loader sass)
            일반적으로 확장자는 .scss사용한다.

    3) CSSModule.module.css 파일과 같은 기능을 하게 새로운  SCSSModule.module.scss 로 변경해서 사용

    [css/SCSSModule.module.scss]
        /* 파일 안에서만 사용하는 클래스 */
        .wrapper{
            background: black;
            padding: 1em;
            color: white;
            font-size: 2rem;

            /* 이렇게 되면 wrapper와 inverted 모두 있는 경우에만 Css가 적용된다. */
            & .inverted{
                color: black;
                background: white;
                border: 1px solid black;
            }
        }

        .inverted{
            color: black;
            background: white;
            border: 1px solid black;
        }

        /* 모든 곳에서 사용할 수 있는 클래스 - 이름을 수정하지 않는다. */
        :global{
            .somthing{
                font-weight: 800;
                color: aqua;
            }
        }

    [src/component/CSSModuel.jsx]
        import React from 'react'
        import styles1 from'../css/CSSModule.module.css'
        import classNames from 'classnames/bind'
        import styles2 from'../css/SCSSModule.module.scss'


        // cx 안에서는 styles 생략하는 것이 가능.
        const cx1 = classNames.bind(styles1)
        const cx2 = classNames.bind(styles2)

        export const CSSModule = () => {
        return (
            <div className={`${styles1.wrapper} ${styles1.inverted}`}>
                처음 사용해보는 
                {/* :global이 적용된 css요소는 클래스네임.적용할 css 형태가 아니라 바로 css요소 이름으로 작성 */}
                <span className='somthing'>CSS Modeule</span>

                <div className={cx1('wrapper', 'inverte')}>
                    classnames 라이브러리 사용하기
                </div><br/>

                <span className='somthing'>SCSS Modeule</span>
                <div className={cx2('wrapper', 'inverte')}>
                    SCSS 사용해 보기
                </div>
            </div>
        )
        }

        export default CSSModule

    4) scss 파일 생성 후 적용
        => App.scss파일 생성후 적용

    [App.scss]
        /* 태그에 box클래스가 있고 blue 클래스가 있으면 마우스를 해당 태그에 올렸을 때 CSS 적용 */
        /* 태그들이 계층이 많아질 수록 CSS의 선택자와 의사선택자 등이 옆으로 코드를 나열해야하지만 scss를 사용하면 계층구조로 나타낼 수 있다. */
        .box{
            display: inline-block;
            width: 100px;
            height: 100px;
            border: 1px solid black;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            
            &.blue{
                background: blue;
            }

            &:hover{
                background: yellow;
            }

            /* 계층 구조가 아니라 그냥 box의 자식 클래스 */
            .box-inside{
                background: black;
                width: 50px;
                height: 50px;
            }
        }

    [App.js]
        import React from 'react'
        import  CSSModule  from './component/CSSModule'

        import classNames from 'classnames'
        import styles from './App.scss'

        const cx = classNames.bind(styles)

        const App = () => {
        const isBlue = true;


        return (
            <div>
            <CSSModule/><br/>
            <div className={cx('box', {blue: isBlue})}>
                <div className={cx('box-inside')}/>
            </div>
            <div className={cx('box-inside')}/> {/* App.scss에서 box의 자식으로 만들었기 때문에 부모에 box클래스를 가져오지 않는다면 설정되지 않는다. */}
            </div>
        )
        }

        export default App

    5) 변수와 믹스 인 사용
        => $변수명: 값 ; 의 형태로 변수를 만들어서 다른곳에서 @import를 통해서 사용이 가능하다.

        => 믹스 인 은 여러 속성을 모아놓은 것으로 아래와 같이 만들 수 있다.
            @mixin 이름(){
                속성: 값
                ...
            }
        => 다른 곳에서 @include 이름(); 으로 다른 곳에서 불러올 수 있다.
        
        => 변수와 믹스인은 자주사용하는 속성(디자인)이 있을 때 유용하게 사용한다.
        => src 디렉토리에 styles 디렉토리를 생성한다.

        => 공통된 스타일 속성을 정의할 util.scss 파일을 생성하고 작성하고 App.scss에 불러와서 사용한다.
        [src/css/util.scss]
            $size: 100px;

            @mixin place-at-center {
                top: 70%;
                left: 50%;
                transform: translate(-50%, -50%);
            }

        [App.scss]
            @import './css/util.scss'; // $변수와 @mixin을 사용하기 위해 불러온다.

            /* 태그에 box클래스가 있고 blue 클래스가 있으면 마우스를 해당 태그에 올렸을 때 CSS 적용 */
            /* 태그들이 계층이 많아질 수록 CSS의 선택자와 의사선택자 등이 옆으로 코드를 나열해야하지만 scss를 사용하면 계층구조로 나타낼 수 있다. */
            .box{
                display: inline-block;
                width: $size;
                height: $size;
                border: 1px solid black;
                position: fixed;
                
                @include place-at-center();
                
                &.blue{
                    background: blue;
                }

                &:hover{
                    background: yellow;
                }

                /* 계층 구조가 아니라 그냥 box의 자식 클래스 */
                .box-inside{
                    background: black;
                    width: 50px;
                    height: 50px;
                }
            }
        
        => 애플리케이션을 개발하다 보면 컴포넌트 1개와 scss 파일 1개가 쌍으로 만들어지는 경우가 많은데 여러 컴포넌트를 만들다보면
        
        공통적으로 사용하는 scss 라이브러리들이 있는데 이러한 라이브러리들을 util.scss 에서 import하면 다른 곳에서는 별도의 import 없이 사용하는 것이 가능하다.