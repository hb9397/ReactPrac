[react_prac4]

1. 기본 설정
    => sass-loader(Scss파일 사용을 위한 라이브러리), sass(Scss파일 사용을 위한 라이브러리), react-icons, classnames, open-color  라이브러리 설치

    1) index.css (global css) 수정
    => body 태그의 padding과 backgoround 추가

    [index.css]
    body {
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
        sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    padding: 0;
    background: #e9e9e9;
    }

    code {
    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
        monospace;
    }

    => Web Application에서 body나 모든 box 태그에 margin과 padding을 0으로 설정하는 경우가 있는데 이유는 구버전의 IE 와의 호환성 문제 때문이다.
        -> IE 구버전은 width와 height 안에 padding과 margin 그리고 border의 크기가 포함되고 나머지 브라우저는 content의 크기만 포함된다.

    2) App.js 수정
    [App.js]
    import React from 'react'

    const App = () => {
    return (
        <div>
        To Do Application
        </div>
    )
    }

    export default App

2. UI
    1) 구성
        ToDoTemplate: Main 컴포넌트
        ToDoInsert: 데이터 삽입을 위해 하나의 input과 버튼을 가진 컴포넌트
        ToDoListItem: 하나의 항목을 출력하기 위한 컴포넌트
        ToDoList: ToDoListItem 의 목록을 출력하기 위한 컴포넌트

        => ToDoListItem을 ToDoList에 배치하고 ToDoList와 ToDoInsert를 ToDoTemplate에 배치해서 ToDoTemplate을 App에 배치시킨다.

        => ToDo의 내용은 사용자 구분을 위한 값, 내용, 실행 여부로 구성한다.

        => 모든 컴포넌트와 scss 파일은 /src/components 디렉토리에 배치한다.
        => 이 부분은 컴포넌트와 scss파일과 index.js로 묶어서 별도의 디렉토리로 구성해도 되며 디렉토리의 이름은 컴포넌트의 이름과 같아야한다.
            -> 재사용증가.

        => node 기반의 프로젝트에서 index.js의 역할은 디렉토리 안의 모든 것들을 외부에서 사용할 수 있도록 export 하는 것이다.
        => 이렇게 되면 require나 import 할 때 디렉토리안에 있는 index.js파일에서 export한 내용을 가져온다.

    2) Main화면(ToDoTemplate.jsx)

    [ToDoTemplate.jsx]
        import React from 'react'
        import './ToDoTemplate.scss'

        // 상위 컴포넌트에서 넘겨준 props의 속성 중 children을 매개변수로 받는다.
        const ToDoTemplate = ({children}) => {
        return (
            <div className='ToDoTemplate'>
                <div className='app-title'>일정관리</div>
                <div className='content'>{children}</div>
            </div>
        )
        }

        export default ToDoTemplate

    => ToDoTemplate.jsx의 Style 파일 ToDoTemplate.scss를 components 디렉토리에 생성한다.
    [ToDoTemplate.scss]
        .ToDoTemplate{
            width: 512px;
            margin-left: auto;
            margin-right: auto;
            margin-top: 6rem;
            border-radius: 4px;
            overflow: hidden;

            .app-title{
                background: #22b8cf;
                color: white;
                height: 4rem;
                font-size: 1.5rem;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .content{
                background-color: white;
            }
        }
    
    => App.js 파일에 ToDoTemplate.jsx 출력해서 화면 확인.

    3) 데이터 삽입(ToDoInsert.jsx)
    => 데이터 삽입을 위해 하나의 input과 버튼을 가진 컴포넌트

    [ToDoInsert.jsx]
        import React from 'react'

        // react-icons 라이브러리의 MaterialDesign의 MdAdd 라는 아이콘을 사용한다.
        // 다른 iocons를 사용할 거라면 https://react-icons.github.io/react-icons 에서 보고 지정
        import {MdAdd} from 'react-icons/md'
        import './ToDoInsert.scss'

        const ToDoInsert = () => {
        return (
            /* className은 ToDoInsert.scss 파일에서 지정자 역할을 하는 클래스이름과 동일하게 한다. */
            <form className='ToDoInsert'>
                <input placeholder='할 일을 입력하세요'/>
                <button type='submit'><MdAdd/></button>
            </form>
        )
        }

    export default ToDoInsert

    => ToDoInsert.jsx 를 App.js에서 ToDoTemplate안에 출력하도록 수정
    [App.js]
        import React from 'react'
        import ToDoTemplate from './components/ToDoTemplate'
        import ToDoInsert from './components/ToDoInsert'

        const App = () => {
        return (
            <ToDoTemplate>
            <ToDoInsert/>
            </ToDoTemplate>
        )
        }

        export default App

    => ToDoInsert.scss 파일 생성후 작성
    [ToDoInsert.scss]
    .ToDoInsert{
        display: flex;
        background: #495057;
        input{
            background-color: none;
            outline: none;
            border: none;
            padding: 0.5rem;
            font-size: 1.125rem;
            line-height: 1.5;
            color: black;
            
            &::placeholder{
                color: #dee2e6;
            }

            flex: 1; /* 상위 태그에 flex가 설정되어 있으면 전체 합에 대한 비율로 배치가 가능하다. - bootstrap이 많이사용(전체 합이 늘 12) */
        }

        button{
            background: none;
            outline: none;
            border: none;
            background: #868e96;
            color: white;
            padding-left: 1rem;
            padding-right: 1rem;
            font-size: 1.5rem;
            display: flex;
            align-items: center;

            cursor: pointer;

            transition: 1.0s background ease-in;

            &:hover{
                background: #abd5bd;
            }
        }
    }

    4) 데이터 목록화면(ToDoListItem.jsx, ToDoList.jsx)
    => ToDoListItem.jsx 는 하나하나의 항목을 출력한다.
    => 하나하나의 항목인 ToDoListItem.jsx의 스타일 적용을 위한 ToDoListItem.scss 파일을 생성하고 작성한다.

    => ToDoList.jsx 는 작성된 하나하나의 항목인 ToDoListItem 을 List 방식으로 출력한다.
    => ToDoList.jsx의 스타일 적용을 위한 ToDoList.scss 파일을 생성하고 작성한다.
   
    => App.js에서 출력하고 확인

    [ToDoListItem.jsx]
    import React from 'react'
    import '/ToDoListItem.scss'
    import {
        MdCheckBoxOutlineBlank,
        MdCheckBox,
        MdRemoveCircleOutline
    } from 'react-icons'

    const ToDoListItem = () => {
    return (
        <div className='ToDoListItem'>
            <div className='checkbox'>
                <MdCheckBoxOutlineBlank/>
                <div className='text'>할 일</div>
            </div>
            <div className='remove'>
                <MdRemoveCircleOutline/>
            </div>
        </div>
    )
    }

    export default ToDoListItem

    [ToDoListItem.scss]
    .ToDoListItem{
        padding:1rem;
        display: flex;
        align-items: center;
        
        &:nth-child(even){ // list의 홀수행 짝수행 다르게 표현하기 위한 설정
            background: #f7f9fa; 
        }

        .checkbox{
            cursor: pointer;

            flex: 1;
            display: flex;
            align-items: center;
            
            svg{
                font-size: 1.5rem;
            }

            .text{
                margin-left: 0.5rem;
                flex: 1;
            }

            &.checked{ // 체크 되었을 때
                svg{
                    color: #22b8cf;
                }
                
                .text{
                    color: #adb5bd;
                    text-decoration: line-through; // 취소선
                }
            }
        }

        .remove{ // 삭제 아이콘
            display: flex;
            align-items: center;
            font-size: 1.5rem;
            color: #ff6b6b;
            
            cursor: pointer;

            &:hover{
                color: #ff8787;
            }
        }

        & + &{
            border-top: 1px solid #dee2e6
        }
    }

    [ToDoList.jsx]
    => 이 때, ToDoListItem을 작성된 만큼의 데이터를 아직 불러올 수 없으므로 임의로 N개 작성해서 확인만 한다.

    import React from 'react'
    import ToDoListItem from './ToDoListItem'

    const ToDoList = () => {
    return (
        <div className='ToDoList'>
            {/* 데이터만큼 아직 불러올 수 없으므로 임의로 N개 작성 */}
            <ToDoListItem/>
            <ToDoListItem/>
            <ToDoListItem/>
            <ToDoListItem/>
            <ToDoListItem/>
        </div>
    )
    }

    export default ToDoList

    [ToDoList.scss]
    .ToDoList{
        min-height: 320px;
        max-height: 513px;
        overflow-y: auto;
    }

    [App.js]
    import React from 'react'
    import ToDoTemplate from './components/ToDoTemplate'
    import ToDoInsert from './components/ToDoInsert'
    import ToDoList from './components/ToDoList'

    const App = () => {
    return (
        <ToDoTemplate>
        <ToDoInsert/>
        <ToDoList/>
        </ToDoTemplate>
    )
    }

    export default App

    => 기본적인 UI 구성은 끝난것.

3. 기능 구현
    1) 데이터 배열 출력
    => App.js 파일을 수정해서 샘플 데이터 배열을 state(데이터가 수정되면 component가 리랜더링 된다.)로 생성하고 ToDoList에게 데이터를 전달한다.
    => 이 후 ToDoList.jsx 파일에서 데이터를 넘겨받아서 ToDoListItem.jsx에서 출력하도록 설정한다.
    
    [App.js]
    import React, {useState} from 'react'
    import ToDoTemplate from './components/ToDoTemplate'
    import ToDoInsert from './components/ToDoInsert'
    import ToDoList from './components/ToDoList'

    const App = () => {
    const [toDos, setToDos] = useState([
        {
        id:1,
        text: "HTML, CSS, JS",
        checked: true
        },
        {
        id:2,
        text: "Node.js",
        checked: true
        },
        {
        id:3,
        text: "React",
        checked: true
        },
        {
        id:4,
        text: "NEXT",
        checked: true
        },
        {
        id:5,
        text: "Spring",
        checked: true
        }
    ])

    return (
        <ToDoTemplate>
        <ToDoInsert/>
        {/* 샘플데이터 todDos useState를  toDos이름으로 ToDoList로 넘겨준다.*/}
        <ToDoList toDos={toDos}/>
        </ToDoTemplate>
    )
    }

    export default App

    [ToDoList.jsx]
    import React from 'react'
    import ToDoListItem from './ToDoListItem'

    import './ToDoList.scss'

    const ToDoList = ({toDos}) => {
        // App.js로 부터 넘어온 toDos를 map함수로 toDos의 요소 개수 만큼 출력하도록 수정
    return (
        <div className='ToDoList'>
            {
                toDos.map(toDo => (
                    <ToDoListItem toDo={toDo} key={toDo.id}/>
                ))
            }
        </div>
    )
    }

    export default ToDoList

    [ToDoListItem.jsx]
    import React from 'react'
    import './ToDoListItem.scss'
    import {
        MdCheckBoxOutlineBlank,
        MdCheckBox,
        MdRemoveCircleOutline
    } from 'react-icons/md'
    import cn from 'classnames';

    const ToDoListItem = ({toDo}) => {

        // ToDoList 로 부터 넘어온 데이터 중 text와 checked만 분해
        const {text, checked} = toDo;

    return (
        <div className='ToDoListItem'>
            <div className={cn('checkbox', {checked})}>
                {checked? <MdCheckBox/> : <MdCheckBoxOutlineBlank/>}
                <div className='text'>{text}</div>
            </div>
            <div className='remove'>
                <MdRemoveCircleOutline/>
            </div>
        </div>
    )
    }

    export default ToDoListItem

    2) 데이터 추가 기능(데이터를 처리하는 함수는 App.js에 만들어서 넘겨주는 구조-데이터가 App.js에 존재하기 때문이다.)

    => App.js에 데이터 추가 기능을 하는 hook 들을 이용해서 구현한다.
    => App.js 에서 ToDoInsert.jsx로 데이터 추가에 대한 기능을 하는 함수를 전달한다.
    
    => ToDoInsert.jsx에서 넘겨 받은 데이터 추가 함수와 ToDoInsert.jsx에서 만든 데이터 추가 이벤트를 연결한다.

    [App.js]
    // useRef는 변수를 생성하거나 변수를 만들어서 DOM에 할당하기 위해서 사용한다.
    // useCallback은 함수를 무조건 생성하는 것이 아니라 효율적으로 생성하기 위해서 사용한다.
    import React, {useState, useRef, useCallback} from 'react'
    import ToDoTemplate from './components/ToDoTemplate'
    import ToDoInsert from './components/ToDoInsert'
    import ToDoList from './components/ToDoList'

    const App = () => {
    const [toDos, setToDos] = useState([
        {
        id:1,
        text: "HTML, CSS, JS",
        checked: true
        },
        {
        id:2,
        text: "Node.js",
        checked: true
        },
        {
        id:3,
        text: "React",
        checked: true
        },
        {
        id:4,
        text: "NEXT",
        checked: true
        },
        {
        id:5,
        text: "Spring",
        checked: true
        }
    ]);

    // 아이디를 위한 변수를 생성한다.
    const nextId = useRef(6);

    // 삽입을 처리하기 위한 함수
    // toDos에 변화가 생기면 함수를 만들지만 그렇지 않다면 기존 함수의 결과를 사용한다.
    const onClickInsertBtn = useCallback((text) => {
        const toDo = {
        id : nextId.current,
        text,
        checked: false
        }

        setToDos(toDos.concat(toDo));
        nextId.current += 1;
    }, [toDos])

    return (
        <ToDoTemplate>
        <ToDoInsert onClickInsertBtn={onClickInsertBtn}/>
        {/* 샘플데이터 todDos useState를  toDos이름으로 ToDoList로 넘겨준다.*/}
        <ToDoList toDos={toDos}/>
        </ToDoTemplate>
    )
    }

    export default App

    [ToDoInsert.jsx]
    => form에서 submit 이벤트가 발생하면 호출될 함수를 생성한다.
    => form 안에서 submit 이벤트가 발생하지만 form 안에서 Enter를 입력해도 submit 이벤트가 발생한다.
    => form 없이 사용하면 키보드로 Enter를 입력했을 때 이벤트 처리를 따로 해야 submit이 발생하게 해야 하고 버튼을 눌렀을 때도 submit 이벤트를 처리해야한다.
    => 그러나 form 내부에 button type을 submit으로 했을 때 form에서 자동으로 enter의 submit 이벤트가 발생되기 때문에 한번만 처리하면 된다.
    => 주의 사항으로는 입력하는 태그요소가 많아지면 위의 사항은 고려해 보아야한다.
    => Ex> 구글과 네이버 로그인의 차이
        -> 구글 로그인은 한 번에 하나의 입력사항이 있어서 한번에 하나의 유효성 검사후 submit 처리가된다.
        -> 네이버의 로그인은 입력사항이 많아서 Enter 입력시 submit이 아니라 입력칸마다에 대해 알맞은 유효성 검사를 하게된다.

    import React, {useState, useCallback} from 'react'

    // react-icons 라이브러리의 MaterialDesign의 MdAdd 라는 아이콘을 사용한다.
    // 다른 iocons를 사용할 거라면 https://react-icons.github.io/react-icons 에서 보고 지정
    import {MdAdd} from 'react-icons/md'
    import './ToDoInsert.scss'

    const ToDoInsert = ({onClickInsertBtn}) => {
        // 입력된 데이터에 대한 state를 생성한다.
        const [value, setValue] = useState('')

        // 입력된 내용이 변경될 때 호출될 함수를 생성한다.
        const onChangeInput = useCallback((e) => {
            setValue(e.target.value);
        }, [value]);

        // form에서 submit 이벤트가 발생하면 호출될 함수를 생성한다.
        // form 안에서 submit 이벤트가 발생하지만 form 안에서 Enter를 입력해도 submit 이벤트가 발생한다.
        // form 없이 사용하면 키보드로 Enter를 입력했을 때 이벤트 처리를 따로 해야 submit이 발생하게 해야 하고 버튼을 눌렀을 때도 submit 이벤트를 처리해야한다.
        // 그러나 form 내부에 button type을 submit으로 했을 때 form에서 자동으로 enter의 submit 이벤트가 발생되기 때문에 한번만 처리하면 된다.
        // 주의 사항으로는 입력하는 태그요소가 많아지면 위의 사항은 고려해 보아야한다.
        // Ex> 구글과 네이버 로그인의 차이 -> 네이버의 로그인은 입력사항이 많아서 Enter 입력시 submit이 아니라 입력칸에 대해 알맞은 유효성 검사를 하게된다.

        const onSubmit = useCallback((e) => {
            
            const result = window.confirm(`추가할 내용: ${value}`);
            if(result === false){
                e.preventDefault();
                return;
            }

            // 데이터 삽입
            onClickInsertBtn(value);

            // input초기화
            setValue('');

            // 제공되는 기본 이벤트 처리 코드를 수행하지 않는다.
            // form의 submit이나 a의 link 이벤트는 화면 전체를 갱신하기 때문에 이전 내용을 모두 잃어버리기 때문에 기본 이벤트를 사용하지 않도록 처리한다.
            e.preventDefault();
        }, [onClickInsertBtn, value])

    return (
        /* className은 ToDoInsert.scss 파일에서 지정자 역할을 하는 클래스이름과 동일하게 한다. */
        /* form 태그 내부의 button은 type이 submit이기 때문에 자동으로 form태그의 onSubmit 이벤트를 불러온다. */
        <form className='ToDoInsert' onSubmit={onSubmit}>
            <input value={value} onChange={onChangeInput} placeholder='할 일을 입력하세요'/>
            <button type='submit'><MdAdd/></button>
        </form>
    )
    }

    export default ToDoInsert

    3) 데이터 삭제 기능 구현
    => App.js 파일에 삭제 함수를 추가하고 ToDoList 에게 전달한다.