
[react_prac5]

** 데이터 불변성(매우 중요_CS에서도 코딩에서도) **
1. 불변성 
    => React에서는 props와 useState로 만든 데이처는 원본을 수정할 수 없다.
    => Recat는 Virtual DOM의 개념을 사용해서 랜더링을 구현한다.
    => React는 현재 화면의 DOM과 Memory 상의 Virtual DOM을 비교해서 수정된 부분만 다시 랜더링 하는 구조로 랜더링 속도를 향상시킨다.
    => 게임의 물리 엔진도 이 원리를 이용하고, 항상 비교를 위해서 원본은 수정되면 안된다.

    => JS는 1개 데이터를 가진 것과 여러개의 데이터르 가진 것이 사용할 때, 다른 원리로 동작한다.(데이터는 참조/비참조가 아니라 1개인지 2개이상인지로 구별한다.)

        let a = 10; , let b = a; 와 let obj1 = {name: "adam"};, let obj2 = obj1; 은 다른원리로 동작한다.
        근본적으로 참조를 b나 obj2에 대입하는 것은 같으나 let b = a;는 let b = 10 즉 데이터 10 자체를 가리키게 한것과 같아서 a와 b는 서로 영향을 주지 않는다.
        obj2는 obj이 참조하고 있는 곳의 시작위치의 Hashcode를 obj2에 대입하는 것과 같으므로 obj1과 obj2는 서로 영향을 미친다.
        객체 뿐만 아니라 배열도 마찬가지다.

    => 이 때 React에서는 앞서 봤든 Virtual DOM과 DOM을 비교해서 리랜더링 하는 것을 반영하기 때문에 컴포넌트 내부에서 배열이나 객체를 사용할 때는 항상 객체나 배열의 원본을 수정할 수 없다.
    => 그러므로 배열에서는 배열객체의 함수를 사용할 때 return을 하는 함수를 사용하는 것인지 확인하거나 없으면 let ar3 = [...ar1]처럼 복제해서 작업한다.
    => return이 있는 함수는 왠만해서 원본의 데이터를 수정하지 않지만 없는 함수는 원본을 접근할 가능성이 높다.
        -> for each도 return하지 않지만 for each는 함수에 순회해서 접근하는 것 말고는 작업하지 않는다.

    => 하지만 객체는 return을 해주는 함수가 거의 없으므로 복제해서 사용하는 경우가 많기 때문에 let obj3 = {...obj1}과 같이 복제해서 작업해야 한다.
    => {...객체}, [...배열] 은 spread 연산이라고 한다.
    => spread 연산은 얕은 복사에 해당한다.

    => 위와 같이 객체나 배열과 같이 2개 이상의 복제 문제를 해결하기 위해 얕은복사(weak copy)와 깊은복사(deep copy)가 있다.
    
    => 얕은 복사(가장 바깥쪽만 복사한다.)의 경우
        let original = {num : 2000}
        let weakcopy = Object.assign({}, original);
        weakcopy.num = 3000;
        
        console.log(weakcopy);
        console.log(original);
    => 확인하면 서로 값이 다른것을 확인할 수 있다.

    => 이때 얕은 복사의 문제점은 객체안에 존재하는 객체의 속성이나 배열 내부의 데이터는 여전히 같은 참조를 가리키게 복제 된다는 것이다.
        original = {
            num : 1000,
            ar:["a", "b"]
        }
        // spread연산도 얕은 복사에 해당한다.
        let weakcopy = {...original}
        weakcopy.ar[0] = "이런"

        console.log(weakcopy);
        console.log(original);
    => 얕은 복사를 해도 객체 값의 참조를 다르게 할 수 있어도 안에 존재하는 객체의 속성이나 배열 내부의 데이터의 참조는 다르게 할 수 없어서 객체 내부의 객체속성이나 배열요소를 변경하면 동일하게 변경된다.

    => 깊은 복제는 JS 내부 라이브러리에는 존재하지 않는다.
    => 깊은 복사는 재귀적으로 복제하는 것을 뜻한다.
    => 편법으로 데이터만 있는 경우에는 JSON 문자열로 변환후 JSON 파싱을 수행하는 방법이 있다.(JSON은 함수가 없기 때문에 함수의 HashCode참조를 다르게 할 방법으로는 사용할 수 없다.)
        
        original = {
            num : 1000,
            ar:["a", "b"]
        }
        let deepcopy = JSON.pars(JSON.stringfy(original));
        deepcopy.ar[0] = "이런"
        console.log(deepcopy);
        console.log(original);
    => original의 배열 요소와 복제한 deepcopy 객체의 배열요소가 서로 다른 것을 확인한다.

    => 함수도 복제하고 싶은 경우 함수를 직접 구현하거나 외부 라이브러리의 도움을 받는다.
    => immer나 loadsh 같은 외부 라이브러리가 이를 수행할 수 있다.
    
2. immer
    => 불변성을 신경쓰지 않으면서 업데이트 할 수 있는 라이브러리.
    => immer 라이브러리의 produce 라는 함수를 이용해서 업데이트 하면 객체를 복제해서 작업한 후 다시 원본에 적용한다.
    ex> const state = {
            number: 1,
            ...
        }

        setState({...state, number: number+1})
    => 위의 예시를 immer로 사용하게 되면

        const nextState = produce(state, draft => {
            draft.number += 1;
        });
    => 이렇게 되면 state를 복제해서 draft에 삽입을 하고 작업을 수행한 뒤 반환한다.
    => 이 때 draft에 복제를 할 때 Deep Copy를 수행한다.
    => JSON 파싱과 다르게 함수도 깊은 복사를 수행할 수 있다.
    => 그러나 실제로 사용할 일이 있다면 실제로 Deep Copy를 메서드로 구현해 보는 것도 좋다.

3. immer 사용하지 않고 불변성 유지 
    => 버튼을 누르면 등록을 하고 클릭하면 삭제하도록 작성
    
    [App.js]
    import React, {useState, useCallback, useRef} from 'react'

    const App = () => {
    // 컴포넌트 안에서 사용할 변수 생성
    const nextId = useRef(1);

    const [form, setForm] = useState({
        name : "",
        username: ""
    }); 

    const [data, setData] = useState({
        array: [],
        useLessValue: null
    });

    // input에 입력받는 경우 입력하는 데이터가 변경될 때 state를 수정해줄 함수
    const onChangeInput = useCallback((e) => {
        // state가 하나 일 때는 state이름 : e.target.value 로 작성하지만 여러개일 때는 아래와 같이 작성한다.
        setForm({
        ...form,
        [e.target.name]: [e.target.value] 
        })
    }, [form]) // 보통 비워둘 때 경고가 발생하는데, setter로 변경하는 data를 대입하면 사라진다(상관은 없음)

    // 입력받은 데이터를 등록하는 함수로 form에서 submit 이벤트가 발생될 때 호출되는 함수
    // 컴포넌트 안에서 함수를 만들 때, 특별한 경우가 아니면 useCallback안에 만드는 것이 좋다.
    // useCallback을 이용하게 되면 두번째 매개변수인 deps 배열안의 데이터가 변경되는 경우만 새로 만들어지기 때문이다.
    // useCallback을 사용하지 않으면 컴포넌트가 리랜더링 될 때 마다 컴포넌트 내부의 함수도 새롭게 만들어진다.
    const onSubmitData = useCallback((e) => {
        // 기본제공 하는 이벤트를 수행하지 않도록 하는 것인데, a 태그를 이용한 이동이나 form의 submit이나 reset 이벤트는 화면 전체를 새로 생성한다.
        // 이 경우 이전에 가지고 있던 내용을 모두 삭제한다, 
        // 하지만 reac, angular, vue는 SPA Frame work 라서 화면전체를 다시 랜더링 하면 기본틀이 무너진다. --> SPA를 사용하는 이유가 없어짐
        // 화면의 출력 내용과 가상의 DOM을 비교해서 변경된 부분만 리랜더링 하기 때문이다.
        e.preventDefault();

        const info = {
        id: nextId,
        name: form.name,
        username: form.username
        }

        setData({
        ...data,
        array: data.array.concat(info)
        }) // data state에 array 배열에 info 객체에 입력된 현재 값을 복사해서 추가한다.

        setForm({
        name: '',
        username: ''
        }); // form에 연결된 입력 값 state 초기화
        
        nextId.current += 1; // 다음에 입력할 데이터의 id값
        console.log("!")
    }, [data, form.name, form.username]); // deps 배열에 data, form.name, form.username의 데이터가 변경될 때만 해당 함수 호출


    // 데이터를 삭제하는 함수
    const onClickRemove = useCallback((e) => {
        setData({
        ...data,
        array: data.array.filter(info => info.id !== e)
        })
        console.log("?");
    }, [data]);
    

    return (
        <div>
        <form onSubmit={onSubmitData}>
            <input name='username' placeholder='아이디를 입력하세요.' value={form.username} onChange={onChangeInput}></input>
            <input name='name' placeholder='이름을 입력하세요.' value={form.name} onChange={onChangeInput}></input>
            <button type='submit'>등록</button>
        </form>

        <div>
            {/* 항상 배열을 화면에 뿌릴 때는 map함수 사용 */}
            <ul>
            {data.array.map(info => (
                <li key={info.id} onClick={() => onClickRemove(info.id)}>
                {info.username} ({info.name})
                </li>
            ))}
            </ul>
        </div>
        </div>
    )
    }

    export default App

4. immer 사용해서 불변성 유지

    [App.js]
    import React, {useState, useCallback, useRef} from 'react'
    import immer from 'immer'

    const App = () => {
    // 컴포넌트 안에서 사용할 변수 생성
    const nextId = useRef(1);

    const [form, setForm] = useState({
        name : "",
        username: ""
    }); 

    const [data, setData] = useState({
        array: [],
        useLessValue: null
    });

    /*   // input에 입력받는 경우 입력하는 데이터가 변경될 때 state를 수정해줄 함수
    const onChangeInput = useCallback((e) => {
        // state가 하나 일 때는 state이름 : e.target.value 로 작성하지만 여러개일 때는 아래와 같이 작성한다.
        setForm({
        ...form,
        [e.target.name]: [e.target.value] 
        })
    }, [form]) // 보통 비워둘 때 경고가 발생하는데, setter로 변경하는 data를 대입하면 사라진다(상관은 없음)
    */

    const onChangeInput = useCallback((e) => {
        setForm(
        //draft가 form의 복제본이 되고 draft를 수정하면 immer가 알아서 form에 전송한다.
        immer(draft => {
            draft[e.target.name] = e.target.value;
        })
        )
    })

    // 입력받은 데이터를 등록하는 함수로 form에서 submit 이벤트가 발생될 때 호출되는 함수
    // 컴포넌트 안에서 함수를 만들 때, 특별한 경우가 아니면 useCallback안에 만드는 것이 좋다.
    // useCallback을 이용하게 되면 두번째 매개변수인 deps 배열안의 데이터가 변경되는 경우만 새로 만들어지기 때문이다.
    // useCallback을 사용하지 않으면 컴포넌트가 리랜더링 될 때 마다 컴포넌트 내부의 함수도 새롭게 만들어진다.
    /* const onSubmitData = useCallback((e) => {
        // 기본제공 하는 이벤트를 수행하지 않도록 하는 것인데, a 태그를 이용한 이동이나 form의 submit이나 reset 이벤트는 화면 전체를 새로 생성한다.
        // 이 경우 이전에 가지고 있던 내용을 모두 삭제한다, 
        // 하지만 reac, angular, vue는 SPA Frame work 라서 화면전체를 다시 랜더링 하면 기본틀이 무너진다. --> SPA를 사용하는 이유가 없어짐
        // 화면의 출력 내용과 가상의 DOM을 비교해서 변경된 부분만 리랜더링 하기 때문이다.
        e.preventDefault();

        const info = {
        id: nextId,
        name: form.name,
        username: form.username
        }

        setData({
        ...data,
        array: data.array.concat(info)
        }) // data state에 array 배열에 info 객체에 입력된 현재 값을 복사해서 추가한다.

        setForm({
        name: '',
        username: ''
        }); // form에 연결된 입력 값 state 초기화
        
        nextId.current += 1; // 다음에 입력할 데이터의 id값
        console.log("!")
    }, [data, form.name, form.username]); // deps 배열에 data, form.name, form.username의 데이터가 변경될 때만 해당 함수 호출 */

    const onSubmitData = useCallback((e) => {
        e.preventDefault();

        const info = {
        id: nextId,
        name: form.name,
        username: form.username
        }

        // data를 draft에 깊은 복사를 하고 draft에 작업을 수행한 후 다시 data에 복제한다.
        setData(immer(draft => {
        draft.array.push(info);
        }));

        setForm({
        name: '',
        username: ''
        });

        nextId.current += 1;
    })


    // 데이터를 삭제하는 함수
    /* const onClickRemove = useCallback((e) => {
        setData({
        ...data,
        array: data.array.filter(info => info.id !== e)
        })

    }, [data]); */

    const onClickRemove = useCallback((e) => {
        setData(immer(draft =>{
        draft.array.splice(
            draft.array.findIndex(info => info.id === e), 1)}
            ))
    });
    

    return (
        <div>
        <form onSubmit={onSubmitData}>
            <input name='username' placeholder='아이디를 입력하세요.' value={form.username} onChange={onChangeInput}></input>
            <input name='name' placeholder='이름을 입력하세요.' value={form.name} onChange={onChangeInput}></input>
            <button type='submit'>등록</button>
        </form>

        <div>
            {/* 항상 배열을 화면에 뿌릴 때는 map함수 사용 */}
            <ul>
            {data.array.map(info => (
                <li key={info.id} onClick={(E) => onClickRemove(info.id)}>
                {info.username} ({info.name})
                </li>
            ))}
            </ul>
        </div>
        </div>
    )
    }

    export default App

