P.S. 운영자 모드(현재는 자동으로 개발자 모드)
    => yarn build, yarn add --location=global serve, serve -s build 명령 입력 안돼면 cmd 에서 설치를 npm으로 진행후 serve 명령 입력
    => 운영자 모드로 실시간으로 요청을 모니터링 할 수 있다.

**React Router**
[react_prac6]
1. Routing
    => 요청 URL에 따라서 분기해서 출력하는 것을 라우팅이라고한다.

2. SPA(Single Page Application)
    1) Server Rendering
    => 웹 브라우저가 서버에게 요청을 전송하면 서버가 HTML을 전송해서 전체를 다시 출력하는 방식이다.
    => 사용자와 인터럭션(사용자의 조작이 많은)이 많은 웹 애플리케이션에서는 속도 측면에서 문제가 발생할 수 있다.

    2) SPA
    => 첫번째 요청을 전송했을 때 만 HTML이 전송되고 그 이후 부터 요청을 하면 서버가 JSON(XML 도 가능) 형태의 데이터를 전송하고 브라우저가 이 데이터를 파싱해서 랜더링하는 구조
    
    => 단점
        -> 앱의 규모가 커지면 JS파일의 사이즈가 너무 커지게 되어서 트래픽과 로딩 속도에 문제가 발생할 수 있는데 이 문제를 해결하기 위해서는 code Splitting을 이용해서 해결한다.
        -> 브라우저에서 JS를 관리하는 경우 크롤러가 페이지의 정보를 제대로 받아가지 못하는 현상이 발생해서 검색엔진에서 페이지의 정보를 검색 결과에 포함하지 못하는 경우가 발생할 수 있다.
        -> 처음 JS가 실행될 때 까지 페이지가 비어있기 때문에 빈페이지가 보여질 수 있는데 이런 경우를 방지하기 위해서는 첫번째 페이지는 서버에서 랜더링을 해서 보여주고 다음 페이지 부터 클라이언트 랜더링을 하는 것이 좋다.
        -> SPA는 적절한 라우팅을 이용해서 여러 페이지를 하나의 페이지에 출력한다.
        -> 라우팅에서 많이 사용되는 라이브러리로 react-router-dom을 사용하는데 5버전과 6버전이 조금 상이하다.

3. 기본적인 사용
    => yarn add react-router-dom 으로 라이브러리 설치

    1) index.js 수정
    [index.js]
    import React from 'react';
    import ReactDOM from 'react-dom/client';
    import './index.css';
    import App from './App';
    import reportWebVitals from './reportWebVitals';
    import {BrowserRouter} from 'react-router-dom'
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(
    <BrowserRouter>
        <App />
    </BrowserRouter>
    );

    // If you want to start measuring performance in your app, pass a function
    // to log results (for example: reportWebVitals(console.log))
    // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
    reportWebVitals();
    
    2) src/components 에 메인으로 보여줄 페이지 Home.jsx 추가
    
    3) src/components 에 About.jsx 추가

    4) URL에 컴포넌트 매핑 App.js 수정
    => 사용방법
        <Route path=URL element={출력하고자 하는 컴포넌트}/>

    [App.js]
    import React from 'react'
    import {Routes, Route} from 'react-router-dom'
    import About from './components/About'
    import Home from './components/Home'

    const App = () => {
    return (
        <Routes>
        <Route path='/' element={<Home/>}></Route>
        <Route path='/about' element={<About/>}></Route>
        </Routes>
    )
    }

    export default App

4. 링크
    => Link 라는 컴포넌트를 사용한다.
    => Link 컴포넌트를 이용하면 페이지를 새로 불러오지 않고 그대로 유지한 상태에서 HTML5 History API를 사용해서 페이지의 URL만 갱신한다.
    => 실제로는 a태그로 만들어져 있는데 페이지 전환을 방지하는 기능이 추가된 컴포넌트이다.

    => 사용방법
        <Link to=URL>내용</Link>

    => Home.jsx에서 About.jsx로 이동하는 Link 만들기
    [Home.jsx]
    import React from 'react'
    import {Link} from 'react-router-dom'

    const Home = () => {
    return (
        <div>
            <h1>메인 페이지</h1>
            <Link to = "/about"><button>소개</button></Link>
        </div>
    )
    }

    export default Home

5. URL Parmeter & Query String
    1) URL Parameter
    => URL의 마지막이나 중간에 데이터를 전송하는 것
    
    Ex> /profiles/adam 에서 adam 부분을 데이터처럼 변경하면서 사용할 수 있는데 이를 URL Parameter라고 한다.
    => 이경우 라우팅 할 때 URL /profiles/:이름 의 형태로 작성해야 한다.
    

    2) Query String
    => URL 뒤에 ?를 추가하고 이름과 값을 전달 할 때 사용한다.
    Ex> /profiles?name=adam&email=itstudy@kakao.com

    3) URL 파라미터를 읽어서 그에 맞는 곳으로 라우팅.. Profile.jsx생성, App.js 수정
    [Profile.jsx]
    import React from 'react'
    import { useParams } from 'react-router-dom'

    const Profile = () => {
        // 출력할 데이터 생성
        const data = {
            adam: {
                name: '군계',
                description: "동일한 작업을 매일하는 것이 가장 어렵다"
            },
            jessica: {
                name: "제시카",
                description: "내가 하기 싫은 일은 남도 하기 싫다."
            }
        }
        //URL 파라미터 읽기
        const params = useParams();

        // username이라는 파라미터를 찾아온다.
        const profile = data[params.username]
        return (
            <div>
                <h1>사용자 프로필</h1>
                {profile ? (<div><h2>{profile.name}</h2><p>{profile.description}</p></div>) :
                    (<p>존재하지 않느 사람입니다.</p>)}
            </div>
        )
    }

    export default Profile

    [App.js]
    import React from 'react'
    import {Routes, Route} from 'react-router-dom'
    import About from './components/About'
    import Home from './components/Home'
    import Profile from './components/Profile'

    const App = () => {
    return (
        <Routes>
        <Route path='/' element={<Home/>}></Route>
        <Route path='/about' element={<About/>}></Route>
        <Route path='/profile/:username' element={<Profile/>}></Route>
        </Routes>
    )
    }

    export default App

    [Home.jsx]
    import React from 'react'
    import {Link} from 'react-router-dom'

    const Home = () => {
    return (
        <div>
            <h1>메인 페이지</h1>
            <ul>
            <li>
            <Link to = "/about"><button>소개</button></Link>
            </li>
            <li>
            <Link to = "/profile/adam"><button>이름으로 이동</button></Link>
            <Link to = "/profile/jessica"><button>이름으로 이동</button></Link>
            <Link to = "/profile/void"><button>이름으로 이동</button></Link>
            </li>
            </ul>
            
            
        </div>
    )
    }

    export default Home

    4) Query String 읽기
    => 근본적으로 Query String은 Client가 Server에 전달하는 데이터로 react 측면에서는 Query String을 읽는 것보다 만드는 것이 중요하다.
    => Query String을 만드는 것은 JS 문법을 이용한다.
    => Query Stirng은 반드시 인코딩 해서 만들어야 한다.

    => useLoacation 이라는 Hook을 이용해서 location이라는 객체를 반환받아서 사용한다.
    => location 객체의 정보
        pathname: query string을 제외한 경로
        search : ?를 포함한 query String
        hash: #문자열 형태의 값, segment라고 부르기도 하는데 페이지 내에서 이동하기 위해서 사용한다, 예전의 구형 브라우저에서 클라이언트 라우팅을 할때 사용했다, jquery(Cross Browsing 라이브러리) mobiile이 hash를 사용 -> 현재는 jquery를 잘 사용하지 않는다.(IE가 Edge로 넘어가면서 대부분의 JS를 받아들임)
              jquery를 사용하지 않는 이유는 숨어있는 ajax로 인한 화면깨짐과 느린속도를 해결하기 위한 많은 script 코드 작성 필요의 문제가
    
    => state : 페이지 이동시 임의로 넣을 수 있는 상태값

    => react-router-dom에서도 useSearchParams 라는 Hook으로 바로 읽을 수 있다.
    => qs 라이브러리를 이용하면 string 객체로 변환할 수 있다.

    => About.jsx에서 Query Stirng을 읽어내는 코드 추가
    [About.jsx]
    import React from 'react'
    import { useLocation } from 'react-router-dom'
    const About = () => {

        // 쿼리 스트링을 읽을 수 있는 훅 생성
        const location = useLocation();

        return (
            <div>
                <h1>React Router 실습</h1>
                <p>Query String: {location.search}</p>
            </div>
        )
    }

    export default About
    
    => 브라우저에 localhost:3000/about?name=adam&number=20 입력해서 확인

    => yarn add qs 명령으로 qs 라이브러리 설치

5. Sub Routing
    => Router 내부에 다시 Router를 만드는 것
    => Articles.jsx 파일을 만들어서 서브라우팅할 내용을 작성한다.

    [Articles.jsx]
    import React from 'react'
    import {Link} from 'react-router-dom'

    const Articles = () => {
    return (
        <div>
            <ul>
                <li>
                    <Link to = "/articles/1">
                        손으로 코딩하고 뇌로 컴파일하며 눈으로 디버깅한다.
                    </Link>
                </li>
                <li>
                    <Link to = "/articles/2">
                        나쁜 프로그램을 만드는 걸 막아주는 프로그래밍 언어는 없다.
                    </Link>
                </li>
                
            </ul>
        </div>
    )
    }

    export default Articles

    => Articles.jsx에서 연결된 링크로 이동하면 출력할 페이지 Article.jsx를 생성하고 작성한다.

    [Article.jsx]
    import React from 'react'
    import { useParams } from 'react-router-dom'

    const Article = () => {

        const {id} = useParams();

    return (
        <div>
            <h2>게시글 {id}</h2>
        </div>
    )
    }

    export default Article

    => App.js에 추가해서 서브라우팅 완성
    [App.js]
    import React from 'react'
    import {Routes, Route} from 'react-router-dom'
    import About from './components/About'
    import Home from './components/Home'
    import Profile from './components/Profile'
    import Article from './components/Article'
    import Articles from './components/Articles'

    const App = () => {
    return (
        <Routes>
        <Route path='/' element={<Home/>}></Route>
        <Route path='/about' element={<About/>}></Route>
        <Route path='/profile/:username' element={<Profile/>}></Route>
        <Route path='/articles' element={<Articles/>}></Route>
        <Route path='/articles/:id' element={<Article/>}/>
        </Routes>
    )
    }

    export default App

6. 공통 레이아웃 
    1) 만드는 방법
    => "/", "/about", "/profile"에 공통된 레이아웃을 위한 컴포넌트 Layout.jsx 를 만들고 각 페이지 컴포너트에 직접 출력한다.
    => 중첩된 라우트와 Outlet을 이용해서 구현 -> 한번만 설정하면 된다.
    => 이후 App.js에 공통된 레이아웃을 위해 수정한다.

    [Layout.jsx]
    import React from 'react'
    import { Outlet } from 'react-router-dom'
    const Layout = () => {

    return (
        <div>
            <headed style = {{background: 'lightgrey',
            padding: 16, fontSize: 24}}>
                Header
            </headed>
            <main>
                <Outlet/>
            </main>
        </div>
    )
    }

    export default Layout

    [App.js]
    import React from 'react'
    import { Routes, Route } from 'react-router-dom'
    import About from './components/About'
    import Home from './components/Home'
    import Profile from './components/Profile'
    import Article from './components/Article'
    import Articles from './components/Articles'
    import Layout from './components/Layout'

    const App = () => {
    return (
        <Routes>
        <Route element={<Layout />}>
            <Route path='/' element={<Home />}></Route>
            <Route path='/about' element={<About />}></Route>
            <Route path='/profile/:username' element={<Profile />}></Route>
        </Route>

        <Route path='/articles' element={<Articles/>}>
            <Route path=':id' element={<Article/>} />
        </Route>
        </Routes>
    )
    }

    export default App

7. 라우팅에서의 index 속성
    => index라는 props가 존재하는데 이 props가 "/"입니다.
    => App.js에 올리는 routing 코드 중 메인 페이지의 path를 index로 구별해주는 것이 좋다.

    [App.js]
    const App = () => {
        .....
        return(
            ...
            <Routes>
            <Route element={<Layout />}>
                <Route index element={<Home />}></Route>
                <Route path='/about' element={<About />}></Route>
                <Route path='/profile/:username' element={<Profile />}></Route>
            </Route>
            ....
            </Routes>
            ...
        )
    }
    ....

8. Router의 부가 기능
    1) useNavigate
    => Link 컴포넌트를 이용하지 않고 다른페이지로 이동하고자 할 때 사용하는 Hook
    => Redirect 하고자 하는 경우에 사용한다.

    P.S. Web에서의 페이지 이동
    - Forwarding
        요청(req)객체를 유지하면서 이동하는데 새로 고침을 하면 요청이 다시 이뤄지는데 이경우에 서버에서 처리하는 로직이 있으면 다시 로직을 수행한다.
        새로 고침을 했을 때 작업을 다시 수행하고자 하는 경우 사용한다. -> 주로 조회할 때 사용한다.

    - Redirect
        요청 객체를 소멸시키면서 이동하고 새로고침을 하면 요청이 다시 이뤄지는 것이 아니고 현재 보여지고 있는 결과를 다시 출력한다.
        작업을 다시 수행하지 않아야 하는 경우에 사용한다. -> 삽/삭/갱 에 주로 이용한다.

    => useNavigate Hook이 반환한 함수를 호출해서 처리할 수 있는데 매개변수로는 정수나 문자열 하나 그리고 옵션을 설정한다.
    => 첫번째 매개변수가 숫자이면 숫자만큼 뒤나 앞으로 이동한다.
    => 문자열이면 이동할 URL이 된다.
    => 두번째 매개변수로 객체를 만들어서 replace 옵션에 true를 설정하면 현재 페이지에 대한 기록을 남기지 않는다.

    2) useNavigate 사용
    => Layout.jsx 수정
    [Layout.jsx]
    import React from 'react'
    import { Outlet, useNavigate } from 'react-router-dom'
    const Layout = () => {
        const navigate = useNavigate(); // Navigate hook 호출

        // 뒤로 이동하는 함수
        const goBack = () => {
            navigate(-1);
        }

        // articles로 이동하는 함수
        const goArticles = () => {
            navigate("/articles");
        }

    return (
        <div>
            <header style = {{background: 'lightgrey',
            padding: 16, fontSize: 24}}>
                <button onClick={goBack}>뒤로</button>
                <button onClick={goArticles}>게시글</button>
            </header>
            <main>
                <Outlet/>
            </main>
        </div>
    )
    }

    export default Layout

    3) NavLink
        => Link와 거의 유사한데 현재 경로와 Link에서 사용하는 경로가 일치하는 경우 특정 스타일을 적용할 수 있도록 해주는 컴포넌트

    4) Navigate
        => 화면에 보여지는 순간 다른 페이지로 이동하고자 할 때 사용하는 컴포넌트
        => Login.jsx 파일을 생성하고 작성
        [Login.jsx]
        import React from 'react'
        const Login = () => {
            

        return (
            <div>
                로그인 페이지
            </div>
        )
        }

        export default Login

        => MyPage.jsx 파일을 생성하고 Navigate처리를 해서 로그인 안되었을 때 Login.jsx 로 넘기고 App.js에 MyPage, Login 라우터 등록
        [MyPage.jsx]
        import React from 'react'
        import { Navigate } from 'react-router-dom'

        const MyPage = () => {
            // 임시로 만든 로그인 여부
            const isLoggedIn = false;

            if(!isLoggedIn){
                return <Navigate to="/login" replace={true}></Navigate>
            }

        return (
            <div>
                MyPage
            </div>
        )
        }

        export default MyPage

        [App.js]
        import React from 'react'
        import { Routes, Route } from 'react-router-dom'
        import About from './components/About'
        import Home from './components/Home'
        import Profile from './components/Profile'
        import Article from './components/Article'
        import Articles from './components/Articles'
        import Layout from './components/Layout'
        import Login from './components/Login'
        import MyPage from './components/MyPage'

        const App = () => {
        return (
            <Routes>
            <Route path='/login' element={<Login/>}></Route>
            <Route path='/mypage' element={<MyPage/>}></Route>
            
            <Route element={<Layout />}>
                <Route index element={<Home />}></Route>
                <Route path='/about' element={<About />}></Route>
                <Route path='/profile/:username' element={<Profile />}></Route>
            </Route>

            <Route path='/articles' element={<Articles/>}>
                <Route path=':id' element={<Article/>} />
            </Route>
            </Routes>
        )
        }

        export default App

    5) 404 에러(클라이언트의 URL이 잘못된 경우)에 대한 대응
         => Route를 만들 때 path를 "*"로 설정한 라우터를 App.js의 가장 밑에 배치해서 404에러에 대응할 컴포넌트와 연결 시킨다.
         [App.js]

         const App = () => {
            ......
            return(
                <Routes>
                ....
                ....
                    <Route path = "*" element={<Home/>}></Route>
                </Routes>
            )
         }

** Context **
1. react 프로젝트에서의 데이터 공유
    => Component의 props를 주로 이용해서 하위 Component에게 넘겨주는 구조를 이용한다.
    => 구조가 간단할 때는 크게 어려움이 없지만 구조가 복잡해지면 번거로운 작업이 많아지게 된다.
    => 여러 곳에서 하나의 데이터를 사용하는 경우도 유사한 작업이 반복될 가능성이 높다.

    => Context API를 이용하면 공유 데이터 작성이 쉬워진다.

2. 사용
    1) src 디렉토리에 contexts 디렉토리를 생성한다.
    2) 데이터를 공유하기 위한 context 파일 color.js를 contexts 디렉토리에 생성하고 작성한다.
    3. App.js에 ColorBox.jsx 페이지(/colorbox) 라우터 등록
    [color.js]
    import { createContext } from "react";

    // 공유할 데이터 생성
    const ColorContext = createContext({color:'black'});

    export default ColorContext
    
    3) 작성한 color.js 의 공유데이터를 사용할 컴포넌트 ColorBox.jsx 컴포넌트 생성하고 작성한다.
    [ColorBox.jsx]
    import ColorContext from "../contexts/color";

    const ColorBox = () => {
        return (

            // color.js에서 가져온 공유 데이터 ColorContext를 사용하라면 부모 태그를 <가져온 공유데이터.Consumer>로 감싸면 그 내부에서는
            // 가져온 공유 데이터를 사용할 수 있다.
            <ColorContext.Consumer>
                {value => (<div style={{
                    width: '64px',
                    height: '64px',
                    background: value.color
                }} />)
                }
            </ColorContext.Consumer>
        )
    }

    export default ColorBox

** Redux **
1. redux 
    => 상태관리 라이브리로 react에서만 사용하는 것은 아니고 node관련 프로젝트에서는 어디서든 사용할 수 있다.
    => Context API 나 useReducer가 나오기 이전부터 존재했다.
    => redux를 이용하면 상태관련 로직을 별도의 파일로 분리해서 관리할 수 있다.
    => 이는 데이터 컴포넌트 간 데이터 공유를 더 쉽게 할 수 있게 도와준다.
    => 프로젝트의 규모가 크거나 비동기 작업을 주로 하는 경우에 많이 사용한다.

2. 키워드
    1) Action
    => 상태에 어떠한 변화가 필요하게 될 action을 발생시키는 객체이다.
    => 이 객체는 type이 필수적이고 나머지는 option이다.
    => type을 가지고 동작을 구분해 작업한다.
    Ex> {
            type: "INSERT", // 본인이 정하는 것
            ...
            type: "INSERT",
            data: {id: 1, name: "adam"}
            ...
            type: "INSERT"
            text: "adammaada"
        }

    2) Action creater
    => Action을 생성하는 함수로 필수는 아니다.
    => 직접 Action 객체를 생성해도 되지만 별도의 함수를 만들어서 사용하기도 한다.
    Ex> exprot function addToDo(data){
            return {
                type: "ADD_TODO",
                data
            }
        }   

    3) Reducer
    예시
    => 상태변화를 일으키는 함수
    Ex> funciton 이름(state, action){
            return 변경된 state
        }

        funciton counter(state, action){
            switch(action.type){
                case "INSERT":
                    return state + 1;
                
                case "DECREASE":
                 return state -1;
                
                default:
                return state;
            }
        }

    4) Store 
    => Redux를 사용하는 애플리케이션에는 하나의 stroe가 생성되는데 이 스토어에는 애플리케이션의 state와 reducer가 들어있고 몇개의 내장 함수를 제공한다.

    => dispatch
        실제 액션을 발생시키는 함수로 이 함수에 action 객체를 대입하면 dispatch가 redure를 호출해서 함수에서 실행해서 상태를 변화 시킨다.

    => subcribe
        이 함수는 함수 형태의 파라미터를 받아서 action이 dispatch될 데 호출되어서 파라미터로 받은 함수를 실행한다.

3. 규칙

    1) 하나의 애플리케이션에 하나의 스토어를 가는 것이 원칙이다.
    2) state는 읽기전용 이다.
    3) reducer는 pure Function 이엉야 한다
        - pure Function(순수함수)는 외부에서 넘겨받은 매개변수는 수정하지 않고 복제를 해서 수정한 후 반환해야 한다.
        - 동일한 입력이면 동일한 출력이 만들어져야 한다.
        - 랜덤이나 new Date 또는 네트워크에서 다운로드 받는 작업등은 일정한 출력을 만들어내지 못하므로 reducer 에서 처리하면 안되고 별도의 미들웨어를 만들어서 처리한다.

    4) 외부 라이브러리 이므로 yarn add redux로 설치해야 한다.

4. 사용
    1) JS 파일은 import만 하면 바로 사용할 수 있다.
    => App.js에 미리 Redux예제 ReduxExam.jsx 파일을 라우터에 등록하고 components 폴더에 ReduxExam.jsx 파일 생성
    => ReduxExercise.js 파일에 콘솔만 출력하게 생성
    => App.js에 ReduxExam.jsx가 등록되어 있고 ReduxExercise.js를 ReduxExam.jsx 에서 import하고 있기 때문에 콘솔창에 바로 입력값을 확인 할 수 있다.

    2) Redux사용
    => ReduxExercise.js 에 Redux예제 코드 작성후 브라우저 콘솔에 분기에 따른 값 찍히는 지 확인
    