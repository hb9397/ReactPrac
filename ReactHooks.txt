1. 컴포넌트 반복
    => 동일한 모양의 컴포넌트를 여러개 배치
    => 배열 형태의 데이터를 출력할 때 유용하게 사용

    1) 배열.map() [변환]
    
            => 배열의 데이터를 순회하면서 매개변수로 받은 함수를 요소 단위로 수행한 후 그 결과를 모아서 다시 배열로 반환하는 함수이다.

        => .map()에 설정하는 매개 변수는 2개다.

            -> 첫번째는 callback 함수로 필수요소 이다.
                - callback 함수의 매개변수는 3개까지 될 수 있고 반드시 하나의 데이터를 반환해야한다.

                - 첫번째 매개 변수는 순회하는 각 요소
                - 두번째 매개 변수는 인덱스
                - 세번째 매개 변수는 배열 그 자체

            -> 두번째는 callback 함수 내부에서 사용할 this 참조로 선택요소이다.

    P.S 배열 작업시 속도 올리려면 map, filter, reduce, for each를 사용해라.

    Ex> let ar = [10, 20, 30] 에서 위의 배열에 5를 더한 배열을 생성한다.

        -> for(let i=0; i<ar.length; i++){
                ar[i] = ar[i] + 5;
            }
        -> React에서는 props나 state 값을 수정할 수 없기 때문에 이런 구조가 성립 되지 않는다.


        ->  let restul = [];
            for(let i=0; i<ar.length; i++){ // 데이터가 3개 일 때, 3번의 true가 나오고 false가 나올 때 비로소 종료한다고 이해.
                result.push(ar[i] + 5);
            }
        -> 틀린 구조는 아니지만 index를 사용하는 것은 비효율 적일 수 있다.

        ->  let restul = [];
            let size = ar.length
            for(let i=0; i<size; i++){ 
                result.push(ar[i] + 5);
            }
        -> 위의 방법과 동일하나 ar.length를 위해 접근하는 횟수를 감소 시켜 접근횟수에서 이득을 본다.

        -> let ar = [10, 20 ,30];
           let result = ar.map((e) => {return e+5}); 
        ->  ar.map(e => return e+5); 도 가능, 매개변수 1개, 수행할 문장 1줄 일때 또한 return이 없으면 람다는 마지막 수행한 것 반환.