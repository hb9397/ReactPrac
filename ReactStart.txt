REACT
1. react
    => UI를 만드는데 사용할 수 있는 JS 라이브러리
    => SPA(Single Page Application) 구현을 위해서 사용하는 경우가 대부분이다.
        -> 같은 목적으로 만들어진 라이브러리로는 angular.js나 vue.js 등이 있다.

    => component 프로그래밍 을 지향
        -> 특정 부분의 모양을 결정하는 선언체
        -> 템플릿 엔진은 데이터 셋과 HTML을 가지고 HTML을 재생성해서 보여주는 용도로만 사용하지만 컴포넌트는 많은 기능을 내장한 재사용 가능한 개체
    
    => 출력시 Virtual DOM을 이용하기 때문에 출력속도가 빠르다
        -> DOM(Document Object Model)은 JS Built-In Object(내장객체)보다 처리속도가 느리다.
        -> react 에서는 Virtual DOM을 이용해서 출력할 내용을 메모리에 만든후 데이터가 변경되면 Virtual DOM에 적용을 하고 실제 DOM과 비교한 뒤 변경되는 부분만 수정해서 출력하는 형태로 동작한다.
        -> 반면 Templet 엔진은 데이터가 변경이 되면 변경된 데이터와 HTML을 가지고 다시 화면을 만들어서 출력한다.
        -> Virtual DOM의 방식은 게임엔진이 화면 출력을 만드는 방식과 비슷하다.

    => MVC(Model-View-Controller), MVVM(Model-View-ViewModel), MVW(Model-View-Whatever), MVP(Model-View-Presentation) 등의 구조를 위한 프레임워크와 다른 오로지 View만을 위한 라이브러리.
    => 일반적으로 프레임워크는 애플리케이션을 만들 수 있지만, 라이브러리만으로 애플리케이션을 만들 수 는 없다는 것으로 구분, React는 프레임 워크가 아닌 라이브러리.

    => React 만으로는 필요한 기능을 가진 Application을 만들 수 없기 때문에 화면을 만드는 것을 제외한 기능은 직접 구현해야 한다는 단점이 있다.
    => ajax 처리를 위한 axios나 fetch api 와 같은 데이터를 가져오기 위한 라이브러리와 redux 와같은 라이브러리를 같이 학습하는 편이 좋다

2. 개발 환경 설정
    1) node 설치

    2) npm : node의 패키지 관리자로 node를 설치하면 자동으로 설치 된다.

    3) yarn
        => react와 마찬가지로 yarn도 FaceBook에서 만들었다.
        => 윈도우 yarn 이슈(https://choonse.com/2021/06/25/101/)
        => npm 을 개선한 패키지 관리자
        => npm 보다 속도가 빠르고 더 나은 캐싱 시스템을 사용
        => 설치
            -> npm install yarn 인데 yarn 명령을 모든 곳에서 사용할 수 있도록 하기 위해서 전역으로 설치한다.
            -> npm install -g yarn 혹은 npm install --location=global yarn
            -> yarn --version 으로 설치 및 버전 확인 가능

    4) webpack
        -> 프로젝트에 사용된 파일을 분석해서 웹 문서 파일로 변환해주는 도구
        -> 웹 브라우저는 js와 css그리고 httml을 해석할 수 있는데 프레임워크나 라이브러리를 사용하다보면 이러한 확장자 이외의 파일을 만들어서 사용하는 경우가 있다, 이 경우 webpack css나 html 로 변환해 준다.
        -> BUT React 프로젝트 작성 명령 수행시 직접 설치할 필요는 없다.


    5) Babel
        => 대다수의 브라우저들은 ES6(ECMA 2015) 버전의 JS 문법까지는 적용할 수 있는데 그 이상의 버전의 문법은 이해하지 못하는 경우가 있을 수 있어서 Babel이 이러한 코드들을 ES6 이하의 문법으로 변환해주는 Trans Compiler 다.

    6) IDE
        => Visual Studio Code 같은 IDE가 필요 하다.

    7) 형상 관리 도구
        => Git이 대표적인 형상관리 도구

    8) 편리한 디버깅을 위해서 [크롬 확장 프로그램]-[React Developer Tools]

    9) React 프로젝트를 만들기 위해서 필요한 애플리케이션 설치

3. 

4. 프로젝트 생성 및 실행
    1) 프로젝트 생성
        => yarn create app-react 애플리케이션이름, npm 을 사용한다면 npx create-app-react 애플리케이션이름 으로 React 프로젝트의 구조가 자동완성된다.

    2) 프로젝트 실행
        => yarn 이면 yarn start, npm이면 npm start

5. JSX
    => JavaScipt XML의 약자로 JS에 XML을 추가한 확장형 문법으로 react 프로젝트에서 사용하는 문법
    => 브라우저에서 실행할 때 Babel이 JS코드로 변환을 해서 실행

    1) 장점
        -> 보기 쉽고 익숙하다.
        -> 코드 작성 중 오류가 있다면 Babel이 코드를 변환하는 과정에서 이를 감지한다.
        -> HTML 태그와 Component를 혼용해서 개발하는 것이 가능하다
    
    2) 규칙
        => 주석
            -> {/*주석*/}
            -> //나 /* */도 가능하지만 이렇게 주석을 만드는 경우 /> 다음 줄에 나와야 한다.
        
        => <fragment></fragment>는 부모 태그로 사용하고 늘 부모태그는 하나만 존재해야한다.
        => fragment 태그는 <> </> 로 사용해도 된다.
        => 꼭 fragment가 아니여도 하나의 부모 요소(태그)로 시작해야 한다. 
        => 태그는 HTML과 다르게 반드시 닫아야한다. 

        => JS 내용을 출력하고자 하는 경우에는 {} 안에 표현, 변수/함수/식 가능.
        => {} 안에는 if 문은 사용할 수 없지만 삼항 연산도 가능
        
        P.S. JS는 boolean 이외의 데이터도 논리연산 (||,&&)이 가능하다.
            -> 0이 아닌 숫자나 null이나 undefined가 아니면 true로 간주한다.
            -> 연산의 결과는 boolean이 아니다.
            -> 연산하는 데이터의 자료형으로 리턴된다.
            -> Ex> 1 && 3 은 3이 참이기 때문에 3이 남는 것이고, 0 && 3 은 앞이 거짓이기 때문에 아무것도 남지 않는다.
        
        => 스타일을 적용할 때는 객체 형식으로 설정
        => 문자열로 설정하지 않는다.
        => 모든 스타일 속성은 camel case를 이용한다.
        => 다른 언어에서 스타일에 -가 포함되어 있던 속성들의 이름이 변경된다.
            -> Ex> background-color ==> backgroundColor

        => html 태그 속성 내에서 class 속성 대신에 className이라는 속성을 이용한다.(클래스와 동일한 기능을 한다.)

6. 개발에 도움이 되는 도구
    1) 코드 작성 도중 에러를 확인할 수 있는 도구 : ESLint
        -> 에러가 포이지 않을 때는 [View-보기]-[Problem-문제] 메뉴를 클릭

    2) 코드 포맷 설정 - prettier
        -> 들여쓰기나 문자열 상수의 작은 따옴표나 큰 따옴표를 일정하게 또는 ;삽입 등을 자동으로 해준다.

7. component
    1) 개념
        => 화면을 구성하는 재사용 가능한 모듈
        => View 는 전체 화면을 의미하는 경우가 많고 Component는 전체 화면의 일부분들을 의미한다.
        => View 는 전체 화면을 만드는 개념이라 재사용성이 떨어짐
        => 확장자는 이전에 js를 많이 사용했지만 최근에는 명확하게 구분하기 위해서 jsx나 tsx(type script 적용시)를 사용하는 경우가 많다.

    2) Component 만드는 방식
        => 클래스 형 컴포넌트, 함수형 컴포넌트가 있는데 현재는 함수형 컴포넌트를 많이 사용한다.
        
        P.S. 함수를 만드는 방법

        -> function 이름 (매개변수) { 내용 } 
            => Hoisting 가능(지양)
            => React 자동완성 : jsx 파일에서 rfc 

        -> let | const 이름 = function(매개변수) { 내용 }
            => Hoisting 불가(지향) 

        -> let | const 이름 (매개변수) => { 내용 }
            => Hoisting 불가(지향)
            => 매개변수 1개 일때, () 생략가능 / {}내용이 한줄(한블럭)이면 생략 가능
                -> (e) => {alert(e);}
                -> e => alert(e);
            => 화살표 함수에서 return은 return을 생략하면 마지막 문장의 결과가 리턴된다.
                -> (a, b) => {return a+b;}
                -> (a, b) => {a + b}

            => 위의 두 규칙은 Java에서도 동일한 개념(람다식_어나니머스 function)으로 적용된다.
            => React 자동완성 : jsx 파일에서 rafc ,rafce(exports.moduel 적용시) 

    3) 클래스 형 컴포넌트
        => 생성
            class 컴포넌트이름 extends Component{
                render(){
                    출력할 내용 반환
                }
            }