REACT
1. react
    => UI를 만드는데 사용할 수 있는 JS 라이브러리
    => SPA(Single Page Application) 구현을 위해서 사용하는 경우가 대부분이다.
        -> 전체 화면을 리랜더링하지 않고 변경된 일부분만을 리랜더링 할 수 있는 컴포넌트 기반의 애플리케이션 구현을 위한 라이브러리다.
        -> 화면을 만드는 부분을 제외하면 별도의 패키지를 설치해서 애플리케이션을 제작
        -> 같은 목적으로 만들어진 라이브러리로는 angular.js나 vue.js 등이 있다.

    => react를 학습하기 전에 Ajax나 fetch API 또는 Axios와 같은 외부 데이터를 가져올 수 있는 부분을 학습해 두는 것이 좋다.

    => React Native는 스마트 폰 애플리케이션 개발(ios와 android 동시개발 가능)을 위한 JS 라이브리로 다르게 분류하지만 사용방법은 어느 정도 비슷하다.

    => component 프로그래밍 을 지향
        -> 특정 부분의 모양을 결정하는 선언체
        -> 템플릿 엔진은 데이터 셋과 HTML을 가지고 HTML을 재생성해서 보여주는 용도로만 사용하지만 컴포넌트는 많은 기능을 내장한 재사용 가능한 개체
    
    => 출력시 Virtual DOM을 이용하기 때문에 출력속도가 빠르다
        -> DOM(Document Object Model)은 JS Built-In Object(내장객체)보다 처리속도가 느리다.

        -> react에서는 데이터 원본을 직접 수정하지 않고 다른곳에 넘겨준 데이터는 복제를 해서 수정한 후 다시 대입하는 형태를 취한다.
        -> react 에서는 Virtual DOM을 이용해서 출력할 내용을 메모리에 만든후 데이터가 변경되면 Virtual DOM에 적용을 하고 실제 DOM과 비교한 뒤 변경되는 부분만 수정해서 출력하는 형태로 동작한다.
            - 메모리 사용량이 많아진다, 복제를 해서 변경한뒤 확정되면 바뀌는 것이기 때문에
        p.s.
            JS 에서 데이터가 1개인 경우에는 그 복제값 자체를 옮겨오지만 0개 이상의 데이터를 담아오는 경우 그 첫번째 참조를 가져와서 사용한다.
        
        -> 반면 Templet 엔진은 데이터가 변경이 되면 변경된 데이터와 HTML을 가지고 다시 화면을 만들어서 출력한다.
        -> Virtual DOM의 방식은 게임엔진이 화면 출력을 만드는 방식과 비슷하다.

    => MVC(Model-View-Controller), MVVM(Model-View-ViewModel), MVW(Model-View-Whatever), MVP(Model-View-Presentation) 등의 구조를 위한 프레임워크와 다른 오로지 View만을 위한 라이브러리.
    => 일반적으로 프레임워크는 애플리케이션을 만들 수 있지만, 라이브러리만으로 애플리케이션을 만들 수 는 없다는 것으로 구분, React는 프레임 워크가 아닌 라이브러리.

    => React 만으로는 필요한 기능을 가진 Application을 만들 수 없기 때문에 화면을 만드는 것을 제외한 기능은 직접 구현해야 한다는 단점이 있다.
    => ajax 처리를 위한 axios나 fetch api 와 같은 데이터를 가져오기 위한 라이브러리와 redux 와같은 라이브러리를 같이 학습하는 편이 좋다

2. 개발 환경 설정
    1) node 설치

    2) npm : node의 패키지 관리자로 node를 설치하면 자동으로 설치 된다.

    3) yarn
        => react와 마찬가지로 yarn도 FaceBook에서 만들었다.
        => node.js 런타임 환경을 위해서 페이스북이 개발한 패키지 관리 시스템이다.
        => npm을 통해서 별도로 설치할 필요가 있다.
        => 윈도우 yarn 이슈(https://choonse.com/2021/06/25/101/)
        => npm 을 개선한 패키지 관리자
        => npm 보다 속도가 빠르고 더 나은 캐싱 시스템을 사용
        => 설치
            -> npm install yarn 인데 yarn 명령을 모든 곳에서 사용할 수 있도록 하기 위해서 전역으로 설치한다.
            -> npm install -g yarn 혹은 npm install --location=global yarn
            -> yarn --version 으로 설치 및 버전 확인 가능

    4) webpack
        -> 프로젝트에 사용된 파일을 분석해서 웹 문서 파일로 변환해주는 도구
        -> 웹 브라우저는 js와 css그리고 httml을 해석할 수 있는데 프레임워크나 라이브러리를 사용하다보면 이러한 확장자 이외의 파일을 만들어서 사용하는 경우가 있다, 이 경우 webpack css나 html 로 변환해 준다.
        -> BUT React 프로젝트 작성 명령 수행시 직접 설치할 필요는 없다.


    5) Babel
        => 대다수의 브라우저들은 ES6(ECMA 2015) 버전의 JS 문법까지는 적용할 수 있는데 그 이상의 버전의 문법은 이해하지 못하는 경우가 있을 수 있어서 Babel이 이러한 코드들을 ES6 이하의 문법으로 변환해주는 Trans Compiler 다.

    6) IDE
        => Visual Studio Code 같은 IDE가 필요 하다.

    7) 형상 관리 도구
        => Git이 대표적인 형상관리 도구

    8) 편리한 디버깅을 위해서 [크롬 확장 프로그램]-[React Developer Tools]

    9) React 프로젝트를 만들기 위해서 필요한 애플리케이션 설치

3. 

4. 프로젝트 생성 및 실행
    1) 프로젝트 생성
        => yarn create app-react 애플리케이션이름, npm 을 사용한다면 npx create-app-react 애플리케이션이름 으로 React 프로젝트의 구조가 자동완성된다.

    2) 프로젝트 실행
        => yarn 이면 yarn start, npm이면 npm start

5. JSX
    => JavaScipt XML의 약자로 JS에 XML을 추가한 확장형 문법으로 react 프로젝트에서 사용하는 문법
    => 브라우저에서 실행할 때 Babel이 JS코드로 변환을 해서 실행

    1) 장점
        -> 보기 쉽고 익숙하다.
        -> 코드 작성 중 오류가 있다면 Babel이 코드를 변환하는 과정에서 이를 감지한다.
        -> HTML 태그와 Component를 혼용해서 개발하는 것이 가능하다
    
    2) 규칙
        => 주석
            -> {/*주석*/}
            -> //나 /* */도 가능하지만 이렇게 주석을 만드는 경우 /> 다음 줄에 나와야 한다.
        
        => <fragment></fragment>는 부모 태그로 사용하고 늘 부모태그는 하나만 존재해야한다.
        => fragment 태그는 <> </> 로 사용해도 된다.
        => 꼭 fragment가 아니여도 하나의 부모 요소(태그)로(주로 div, span 태그) 시작해야 한다. 
        => 태그는 HTML과 다르게 반드시 닫아야한다. 

        => JS 내용을 출력하고자 하는 경우에는 {} 안에 표현, 변수/함수/식 가능.
        => {} 안에는 if 문은 사용할 수 없지만 삼항 연산도 가능
        
        P.S. JS는 boolean 이외의 데이터도 논리연산 (||,&&)이 가능하다.
            -> 0이 아닌 숫자나 null이나 undefined가 아니면 true로 간주한다.
            -> 연산의 결과는 boolean이 아니다.
            -> 연산하는 데이터의 자료형으로 리턴된다.
            -> Ex> 1 && 3 은 3이 참이기 때문에 3이 남는 것이고, 0 && 3 은 앞이 거짓이기 때문에 아무것도 남지 않는다.
        
        => 스타일을 적용할 때는 객체 형식으로 설정
        => 문자열로 설정하지 않는다.
        => 모든 스타일 속성은 camel case를 이용한다.
        => 다른 언어에서 스타일에 -가 포함되어 있던 속성들의 이름이 변경된다.
            -> Ex> background-color ==> backgroundColor

        => html 태그 속성 내에서 class 속성 대신에 className이라는 속성을 이용한다.(클래스와 동일한 기능을 한다.)

6. 개발에 도움이 되는 도구
    1) 코드 작성 도중 에러를 확인할 수 있는 도구 : ESLint
        -> 에러가 포이지 않을 때는 [View-보기]-[Problem-문제] 메뉴를 클릭

    2) 코드 포맷 설정 - prettier
        -> 들여쓰기나 문자열 상수의 작은 따옴표나 큰 따옴표를 일정하게 또는 ;삽입 등을 자동으로 해준다.

7. component
    1) 개념
        => 화면을 구성하는 단위로 재사용 가능한 모듈 하나하나를 의미하한다.
        => View 는 전체 화면을 의미하는 경우가 많고 Component는 전체 화면의 일부분들을 의미한다.
        => View 는 전체 화면을 만드는 개념이라 재사용성이 떨어짐
        => View(전체 화면) > Component(Segment - Contorl을 1개 이상 모아서 만든 논리적인 화면 구성 단위) > Control(작은 부품 하나)

    2) 확장자    
        => 확장자는 이전에 js를 많이 사용했지만 최근에는 명확하게 구분하기 위해서 jsx나 tsx(type script 적용시)를 사용하는 경우가 많다.

    3) Component 만드는 방식
        => 클래스 형 컴포넌트, 함수형 컴포넌트가 있는데 현재는 함수형 컴포넌트를 많이 사용한다.
        
    
    4) 클래스 형 컴포넌트
        => Component 라는 클래스로 부터 상속 받아 render라는 함수에 출력할 내용을 리턴하는 형식으로 생성, 멤버 변수 사용이나 수명주기 메서드를 사용하는 것이 편리하다.
        
        => 생성
            class 컴포넌트이름 extends Component{
                render(){
                    출력할 내용 반환
                }
            }

            export default App;

        => 장점
            -> Life Cycle을 이용하는 것이 가능하다.
            -> 함수는 호출하면 안의 내용을 수행하고 호출한 곳으로 반환한다.
            -> 추가적으로 장점이자 단점으로 인스턴스는 한 번 만들어지면 소멸시키기 전까지 존재하고 생성될 때 생성자와 같은 메서드가 호출되기 때문에 수명주기에 따른 작업이 수월하다.
                => [생성자 호출 => 실제 함수 호출 => 렌더링 함수 호출]
            -> 함수형 컴포넌트에 비해 화면에 보여지는 요소가 많을때 무거워지거나 느려질 가능성이 있다.
            -> 내부에 메서드를 구현할 수 있다.

        => 컴포넌트를 별도의 파일로 만들고 App.js에서 사용하기
            -> 별도의 컴포넌트 test.jsx
                import React, {Component} from 'react';

                class test extends Component{
                render(){
                    return (<div>나의 컴포넌트</div>)
                }
                }

                export default test;

            -> App.js 수정
                import React, {Component} from 'react';
                import TEST from './test'

                class App extends Component{
                render(){
                    const message = "클래스형 컴포넌트 - 과거에 많이 사용함.";
                    return (<div className='react'>{message} <TEST></TEST></div> );
                }
                }


                export default App;

    5) 함수형 컴포넌트
        => 출력할 내용을 반환, 클래스 형 컴포넌트는 것 보다 가볍고 속도가 빨라 최근에 많이 이용된다.

        P.S. 함수를 만드는 방법

        -> function 이름 (매개변수) { 내용 } 
            => Hoisting 가능(지양)
            => React 자동완성 : jsx 파일에서 rfc 

        -> let | const 이름 = function(매개변수) { 내용 }
            => Hoisting 불가(지향) 

        -> let | const 이름 (매개변수) => { 내용 }
            => Hoisting 불가(지향)
            => 매개변수 1개 일때, () 생략가능 / {}내용이 한줄(한블럭)이면 생략 가능
                -> (e) => {alert(e);}
                -> e => alert(e);
            => 화살표 함수에서 return은 return을 생략하면 마지막 문장의 결과가 리턴된다.
                -> (a, b) => {return a+b;}
                -> (a, b) => {a + b}

            => 위의 두 규칙은 Java에서도 동일한 개념(람다식_어나니머스 function)으로 적용된다.
            => React 자동완성(extension 설치) : jsx 파일에서 rafc ,rafce(exports.moduel 적용시)

8. props
    1) 하위 컴포넌트에게 넘겨 줄 때.
        => 상위 컴포넌트(포함하고 있는 컴포넌트, 부모 컴포넌트)에서 하위 컴포넌트에게 데이터를 넘겨 줄 때 사용하는 개체
        => <컴포넌트 이름 props 이름 = 값 ...> 과 같은 형식으로 전달
        => 개수 제한이 없음

    2) 하위 컴포넌트에서 사용 할 때
        => 클래스 형 컴포넌트는 this.props.이름 dmfh tkdyd
        => 함수 형 컴포넌트는 모든 props를 하나로 묶어서 함수의 매개변수로 받음
        => 함수의 매개변수를 이용해서 사용

    3) props 사용

        [App.js]

            import React from 'react'
            import TEST from './test'

            const App = () => {
            const message = " - 클래스형 컴포넌트는 과거에 많이 사용함, 현재는 함수형 컴포넌트를 많이 사용";
            return (
                <>
                <div>함수형 컴포넌트 {message}</div>
                <TEST name = "Adam"/>
                </>
            )
            }

            export default App

        [test.jsx]

            import React from 'react'

            const test = (props) => {
            return (
                <>
                <div>나의 컴포넌트 이름음 {props.name} 입니다.</div>
                </>
            )
            }
            export default test

        => 이 때 App.js 에서 다시 name 이라는 props를 test.jsx 컴포넌트에 전달하지 않으면 아무것도 출력되지 않는다.

        => 함수형 컴포넌트 안에서 컴포넌트이름.defaultProps = {props.이름 = 값..}을 이용해서 기본값을 설정할 수 있다, 데이터가 넘어오지 않을 때 설정되는 값.
        
        [test.jsx]
            import React from 'react'

            const test = (props) => {

            return (
                <>
                <div>나의 컴포넌트 이름음 {props.name} 입니다.</div>
                </>
            )
            };

            test.defaultProps = {name : '기본값'}

            export default test

    4) 상위 컴포넌트에서 하위 컴포넌트 태그 안의 내용을 하위 컴포넌트에서 사용
        => props.children 을 이용해서 상위 컴포넌트에서 태그안에 삽입한 데이터를 읽을 수 있다.

        [App.js]
            import React from 'react'
            import TEST from './test'

            const App = () => {
            const message = " - 클래스형 컴포넌트는 과거에 많이 사용함, 현재는 함수형 컴포넌트를 많이 사용";
            return (
                <>
                <div>함수형 컴포넌트 {message}</div><br/>
                <TEST name = "Adam">태그 안의 내용 사용하기</TEST>
                </>
            )   
            }

            export default App

        [test.jsx]
            import React from 'react'

            const test = (props) => {

            return (
                <>
                <div>나의 컴포넌트 이름음 {props.name} 입니다.</div><br/>
                <div>{props.childrun}</div>
                </>
            )
            };

            test.defaultProps = {name : '기본값'}

            export default test

    5) 비구조화 할당
        => JS는 객체를 분해해서 할당하는 것이 가능하다.
            -> 분해해서 할당할 때는 인덱스가 아니라 이름을 가지고 데이터를 할당한다.

        => test.jsx 파일의 props를 분해해서 할당
        => 매개변수를 props로 한 번에 받아오는 것이 아니라 사용할 prop을 {prop1, prop2, ..} 와 같이 가져와 props.을 생략하고 사용하는 것이 가능하다.

        [tes.jsx]
            import React from 'react'

            const test = ({name, children}) => { // 구조 분해 할당으로 매개 변수 가져오는 순서는 상관이 없음

            return (
                <>
                <div>나의 컴포넌트 이름음 {name} 입니다.</div><br/>
                <div>{children}</div>
                </>
            )
            };

            test.defaultProps = {name : '기본값'}

            export default test

    6) props 의 유효성 검사기능
        => 필수나 자료형을 설정해서 검사하는 것이 가능하다.
        => 그러나 실제 화면 출력에는 영향이 없고 스크립트 오류를 발생시켜 검사창에서만 오류가 발생한다.
        
        => props 값을 전달할 때 문자열이 아니라면 항상 {}로 감싸고 있어야한다.
            -> 기본적으로 XML에서는 태그 안의 속성은 문자열만 가능하기 때문이다.
            -> Ex> <TEST name = 3> </TEST> -> 오류 발생, <TEST name = {3}> </TEST>과 같이 작성

        => props 유효성 검사
        [test.jsx]
            import React from 'react'
            import PropTypes from 'prop-types'

            // 구조 분해 할당으로 매개 변수 가져오는 순서는 상관이 없음
            const test = ({name, children, year}) => {

            return (
                <>
                <div>나의 컴포넌트 이름음 {name} 이고 {year}년에 태어났습니다.</div><br/>
                <div>{children}</div>
                </>
            )
            };

            test.propTypes = {
            name: PropTypes.string,
            year: PropTypes.number.isRequired
            }

            test.defaultProps = {name : '기본값'}

            export default test
        => 만약 name과 year에 각각에 자료형에 맞는 데이터가 들어가 있지 않다면 화면상에는 아무런 문제가 없지만 개발자도구 콘솔을 확인 하면 오류를 확인할 수 있다.

    7) 앞선 내용을 클래스 형 컴포넌트로 변환해보기
        => tes.jsx를 클래스형 컴포넌트로 변환
        [test.jsx]
            import React, { Component } from 'react';
            import PropsType from 'prop-types'

            class test extends Component {
            render() {
                //props 가져오기
                const {name, children, year} = this.props;
                return (
                <>
                    <div>안녕하세요 제 이름은 {name} 입니다.</div>
                    <div>children의 값은 {children} 입니다.</div>
                    <div>제가 태어난 년도는 {year} 년입니다.</div>
                </>
                );
            }
            }
            test.defaultPrprs = {
            name : '기본값'
            }

            test.propsType = {
            name: PropsType.string,
            year: PropsType.number.isRequired
            }
            export default test;

9. Class 형 컴포넌트에서 state 사용 
    => props는 상위 컴포넌트에서 하위 컴포넌트에게 데이터를 전달해주는 개념이다.
    => 하위 컴포넌트는 props를 읽기 전용으로만 사용가능하고 하위 컴포넌트에서 props 자체의 값을 바로 수정할 수는 없다.

    1) 개요
        => 컴포넌트 내부에서 읽고 쓸 수 있는 값을 사용하고자 할 때 사용한다.
        => 기본 값을 설정할 수 있으며, setter 메서드를 통해 수정하는 것도 가능하다.

        => 클래스형 컴포넌트의 경우 초깃값 설정은 constructor(props) 메서드에서 수행한다.
            -> this.state = {state 이름 : 값, ..}

        => 클래스형 컴포넌트의 경우 값의 수정은 setState 메서드를 이용
            -> this.setState({state이름 : 값, ...})

    2) 클래스형 컴포넌트 에서 state 사용
        [/src/component/stateClassType.jsx]
            import React, { Component } from 'react'

            class stateClassType extends Component {
                constructor(props) {
                    // 상위 클래스의 생성자 호출
                    super(props);

                    // 제어하고자 하는 state 생성
                    this.state = {
                        number: 0
                    }
                }

                //state = {number: 0}; // 생성자 사용하지 않고 초기화 하기

                render() {
                    return (
                        <>
                        <p>
                            숫자 : {this.state.number}
                        </p>
                        <button onClick={(e) => {
                            this.setState({number: this.state.number + 1})
                        }}>
                            증가
                        </button>
                        </>
                    )
                }
            }

            export default stateClassType;

        => App.js 에서 import STATE from './component/stateClassType' 추가 후 <STATE></STATE> 반환에 추가해서 확인.

    3) 생성자 외부 클래스 안에서 초기화가 가능하다.
        => 위에 처럼 반드시 constructor(porps) 생성자의 형태로 초기화할 필요는 없다.
        => state = {number: 0}; 와 같은 형태로 초기화가 가능하다.
        => 하지만 객체지향에서는 생성자를 사용하길 권장한다.

    4) state에 함수 전달.
        => state도 하나의 속성이며, JS에서는 함수도 하나의 데이터이므로 state에 함수를 전달하는 것이 가능하다.

        => statComponent.jsx 파일의 button의 onClick 이벤트 처리 코드 수정
         <button onClick={(e) => {
                // this.setState({number: this.state.number + 1})
                this.setState(
                    prevState => {return{number: prevState.number + 1}}
                )
            }}>
                증가
        </button>
        
    5) state 설정이 끝난 후 콜백함수 호출도 가능하다.
        => setState의 두번째 매개변수로 함수를 전달하면 state 설정을 변경한 후 호출되는 함수를 설정할 수 있다.

        => statComponent.jsx 파일의 button의 onClick 이벤트 처리 코드 수정
            <button onClick={(e) => {
                    // this.setState({number: this.state.number + 1})
                    /* this.setState(
                        prevState => {return{number: prevState.number + 1}}
                    ) */
                    this.setState(
                        { number: this.state.number + 1 },
                        () => {
                            console.log('State의 값이 변경됨');
                            console.log(this.state);
                        }
                    )
                }}>
                    증가
            </button>
        
        => 한 곳에서만 사용하는 데이터가 있는 경우 로컬의 데이터를 업데이트 하고 업데이트가 끝나면 서버에 업로드하는 형태를 만들 때 유용하게 사용할 수 있다.
        P.S.
            스마트폰 1개에서만 사용하는 스마트 폰 게임은 데이터를 서버에 만들어두고 클라이언트에서 사용하는 구조
            처음 접속할 때 서버의 데이터를 전부 다운로드 받아서 앱 내에 저장한다.

            클라이언트의 데이터를 업데이트하고 나중에 클라이언트의 데이터를 기반으로 서버의 데이터를 업데이트 하는 것이 트래픽양을 줄이고 출력에 영향을 최소화 할 수 있다.
            ex> 캘린더 어플, 혼자하는 스마트폰 게임 등

10. 함수형 컴포넌트 state useState
    => 함수형 컴포넌트에서 state를 사용하기 위한 react Hook 중 하나다.
    => useState를 호출하게 되면 배열이 반환되는데 첫번째 데이터는 state의 현재 상태이고 두번째 원소는 현재 상태를 변경해주는 setter 역할의 함수이다.
    => useState 에는 상태의 초기값을 매개변수로 대입할 수 있다.

    [/src/component/stateFuncType.jsx]
        
    import React, { useState } from 'react'

    const stateFuncType = () => {
        var [count, setCount] = useState(0);

        const countPlus = (e) => {
            setCount(count= count +1);
        }

        return (
            <div>
                <p>
                    숫자 : {count}
                </p>
                <button onClick={countPlus}>
                    증가
                </button>
            </div>
        )
    }

    export default stateFuncType

    => state를 수정할 때는 클래스형 컴포넌트에서는 setState 그리고 함수형 컴포넌트에서는 useState 함수를 이용해야 한다.

    P.S. 객체나 배열을 수정할 때는 복사본을 만들고 수정하는 것이 바람직하다.
        const object = {'name':'adam', 'age' : 29};
        // name 수정 - object를 직접 수정하는 것.

        // 기존 object의 내용을 복제해서 name을 수정
        const copyObject = {...object, 'name':'군계}

        let ar = [1,2,3]
        ar.push[4]; // 배열에 직접 추가

        let copyAr = ar.concat(4) // 배열에 복사해서 추가적으로

        // 배열에서 데이터를 삭제하거나 변형을 가하고자 할 때는 filter나 map 함수 이용을 권장한다.
        filter나 map은 작업을 수행한 후 새로운 배열을 수행한다.

